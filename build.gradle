import java.time.LocalDateTime
import java.time.ZoneId
import java.time.ZoneOffset

group "com.example"
version "0.0.1-SNAPSHOT"
description "parrit"

buildscript {
    ext {
        springBootVersion = "1.3.3.RELEASE"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

apply plugin: "java"
apply plugin: "spring-boot"


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    compile "org.postgresql:postgresql:9.4.1208.jre7"

    compile(group: "org.springframework.boot", name: "spring-boot-starter-test", version:springBootVersion) {
        exclude(module: "commons-logging")
    }

    compile "org.apache.commons:commons-lang3:3.4"
    compile "org.flywaydb:flyway-core:3.2.1"
}

test {
    filter {
        includeTestsMatching "*Test"
    }
}

task jsTest(type: Exec) {
    workingDir project.projectDir
    commandLine "./node_modules/karma/bin/karma", "start", "karma.conf.js"
}

test.dependsOn(jsTest)

task gruntBuild(type: Exec) {
    workingDir project.projectDir
    commandLine "./node_modules/grunt-cli/bin/grunt", "build"
}

task jsBuild(type: Copy, dependsOn: gruntBuild) {
    from "$project.projectDir/src/main/resources/static/built"
    into "$project.projectDir/build/classes/main/static/built"
}

jar.dependsOn(jsBuild)

task createMigration << {
    def utc = ZoneId.of("UTC")
    def timestamp = LocalDateTime.now(utc).toEpochSecond(ZoneOffset.UTC)
    def path = "src/main/resources/db/migration/V${timestamp}__${migration}.sql"

    "touch $project.projectDir/$path".execute()
    println path
}

task deploy(type: Exec, dependsOn: build) {
    workingDir project.projectDir
    commandLine "cf", "push"
}

defaultTasks "clean", "build"
