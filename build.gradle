import java.time.LocalDateTime
import java.time.ZoneId
import java.time.ZoneOffset

plugins {
    id "org.springframework.boot" version "1.5.8.RELEASE"
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.apache.commons:commons-lang3:3.5"
    compile "org.postgresql:postgresql"
    compile "org.flywaydb:flyway-core"

    testCompile "org.springframework.boot:spring-boot-starter-test"
}

version "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8
targetCompatibility = 1.8

// *** LifeCycle *** //

test {
    filter {
        includeTestsMatching "*Test"
    }
}

task jsTest(type: Exec) {
    workingDir = "$project.projectDir/frontend"
    commandLine = "./node_modules/jest/bin/jest.js"
    args = ["-c", ".jestrc.json"]
}
test.dependsOn(jsTest)

task gruntBuild(type: Exec) {
    workingDir = "$project.projectDir/frontend"
    commandLine = "./node_modules/grunt-cli/bin/grunt"
    args = ["build"]
}

task jsBuild(type: Copy, dependsOn: gruntBuild) {
    from "$project.projectDir/src/main/resources/static/built"
    into "$project.projectDir/build/classes/main/static/built"
}
processResources.dependsOn(jsBuild)

task jsClean(type: Delete) {
    delete "src/main/resources/static/built/bundle.js"
    delete "src/main/resources/static/built/bundle.css"
}
clean.dependsOn(jsClean)

defaultTasks "clean", "build"

// *** Helper Tasks *** //

task createMigration() {
    doLast {
        def utc = ZoneId.of("UTC")
        def timestamp = LocalDateTime.now(utc).toEpochSecond(ZoneOffset.UTC)
        def path = "src/main/resources/db/migration/V${timestamp}__CHANGEME.sql"

        "touch ${project.projectDir}/${path}".execute()
    }
}
